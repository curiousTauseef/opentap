#!/usr/bin/env python
"""
Authors: Christian Macias

Description: Python script that implements the "capture" OpenTap invocation for the 
             Ethernet data type (GET request on /capture/ethernet)

"""
import os
import glob
import json
import time
import cgi, cgitb
import random
import ethernet

cgitb.enable()

def jsonHeader():
    print("Content-Type: application/json")
    print("")

def getEthernet():
	# obtain arguments from CGI
	keysRaw       = cgi.FieldStorage()
	ident         = keysRaw.getvalue('id')
	startTime     = keysRaw.getvalue('start')
	stopTime      = keysRaw.getvalue('stop')
	observationPt = keysRaw.getvalue('observationPt')
	period        = keysRaw.getvalue('period')
	changedStart = 0

	# if no observationPt specified, use the default from opentap.conf
	if(observationPt == None):
		try:
			f = open("/etc/opentap/opentap.conf")
		except:
			observationPt = None

		for line in f:
			if "default-network-observationpt" in line:
				observationPt = (line.split())[1]
	else:
		# if an observationPt was specified, check the aliases in opentap.conf for the OS identifier
		try:
			f = open("/etc/opentap/opentap.conf")
		except:
			observationPt = None
			print("opentap.conf: Unable to open file for reading")
		for line in f:
			if "alias:" in line:
				words = line.split()
				for word in words:
					if(word == str(observationPt)): #check if the alias is in this line
						observationPt = words[1]
						break #Found the alias we were looking for
    
	# if no sampling period was specified, use the default of 1000 msec (i.e., 1 sec)
	if(period == None):
		period = 1000

	# validate start and stop times
	changedStart = 0
	if ((startTime != None) & (stopTime != None)):
		if(int(startTime) < int(time.time())):
			startTime=time.time()
			changedStart = 1	
		if(int(startTime) > int(stopTime)):
			sendJsonHeader()
			return json.dumps({"error": "Start time is later than stop time."})

		# if no id specified by the user, select a random number
		if(ident == None):   
			ident=random.randint(1, 100000000)

		# check that user specified id does not conflict with any existing data objects
		os.chdir("/opt/opentap/log")
		while(os.path.isfile(str(ident)+".csv")):
			# if so, use a random number
			ident=random.randint(1, 100000000)

		#fork to reply to the web request and allow the data collection to continue working
		pid=os.fork()
		if(pid == 0):
			#
			# Data capture code start
			#
			file=open("/opt/opentap/log/"+str(ident)+".csv", "w+")
			if((int(startTime)-int(time.time())) > 0 ):
				time.sleep(int(startTime)-int(time.time()))

			data=ethernet.linkstat(observationPt)
			if(data==None):
				return None
			file.write("time,state,rx_bytes,rx_packets,rx_errors,"\
						"rx_dropped,rx_overrun,rx_mcast,"\
						"tx_bytes,tx_packets,tx_errors,tx_dropped,"\
						"tx_carrier,tx_collision\n")

			while(int(time.time()) < int(stopTime)):
				data=ethernet.linkstat(observationPt)
				file.write(str(int(time.time() * 1000)) + ",")
				file.write(str(data["state"]) + ",")
				file.write(data["rx_bytes"] + ",")
				file.write(data["rx_packets"] + ",")
				file.write(data["rx_errors"] + ",")
				file.write(data["rx_dropped"] + ",")
				file.write(data["rx_overrun"] + ",")
				file.write(data["rx_memset"] + ",")

				file.write(data["tx_bytes"] + ",")
				file.write(data["tx_packets"] + ",")
				file.write(data["tx_errors"] + ",")
				file.write(data["tx_dropped"] + ",")
				file.write(data["tx_carrier"] + ",")
				file.write(data["tx_collision"])
				file.write("\n")

				file.flush();

				time.sleep(float(int(period)/1000))

			file.close()
			return
			#
			# Data capture code stop
			#

		else:
			jsonHeader()

			if(changedStart == 1):
				procStarted={"id" : ident, "startTime": int(startTime), \
							"stopTime": stopTime, "duration" : (int(stopTime) - int(startTime)), \
							"warning": "Changed start Time to now because it was in the past."}
			else:
				procStarted={"id" : ident, "startTime": startTime, \
							"stopTime": stopTime, "duration" : (int(stopTime) - int(startTime))}
			return json.dumps(procStarted)   

	else:
		jsonHeader()
		sessionGET = {"href" : "/retrieve?id=[sessionID]", \
								"rel":"download", \
								"method" : "GET"}
		sessions = {}
		files=glob.glob("/opt/opentap/log/*.csv")
		i=0
		while i < len(files):
			sessions[files[i].replace("/opt/opentap/log/", "").replace(".csv", "")] =  {"filename" : files[i].replace('/opt/opentap/log/', ''), "inprogress" : "no"}
			i=i+1
		links = [sessionGET]
		return json.dumps({'version' : '0.1', "links": links, "sessions" : sessions})


def postEthernet():
	jsonHeader()
	error={"error" : "POST is invalid on this service"}
	return json.dumps(error)


#---------------Get Request--------------------------------

if os.environ.get("REQUEST_METHOD") == "GET":
	string = getEthernet()
	print(string)

#---------------Post Request--------------------------------

if os.environ.get("REQUEST_METHOD") == "POST":
	string = postEthernet()
	print(string)
